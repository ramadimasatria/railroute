{"version":3,"sources":["store/modules/app/actions.ts","store/modules/app/reducer.ts","store/modules/app/index.ts","store/modules/station/reducer.ts","store/modules/station/index.ts","store/modules/line/actions.ts","store/modules/line/reducer.ts","store/modules/line/index.ts","store/modules/route/actions.ts","store/modules/route/reducer.ts","store/modules/route/index.ts","store/reducer.ts","store/buildInitialState.ts","store/index.ts","store/modules/station/selectors.ts","store/modules/line/selectors.ts","store/thunks.ts","helpers.ts","components/SearchForm.tsx","components/SearchFormContainer.tsx","components/StationBadge.tsx","components/RouteItem.tsx","components/ResultDetail.tsx","components/ResultList.tsx","store/modules/app/selectors.ts","components/ResultListContainer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["searchStart","createAction","searchDone","pushResults","reduceFn","_reduceFn","Object","defineProperty","state","payload","objectSpread","isLoading","origin","destination","results","initialState","appReducer","arguments","length","undefined","action","type","allStations","stationNames","stationsByName","stationReducer","addVisitedLine","clearVisitedLines","line_reducer_reduceFn","visitedLines","includes","concat","toConsumableArray","lineNames","stationsByLine","transitsInLine","lineReducer","clearRoutes","pushRoute","pushRouteId","route_reducer_reduceFn","allRoutes","lastRouteIds","route","id","combineReducers","app","station","line","routeReducer","groupStationsBy","key","stations","reduce","obj","groupKey","push","sortStations","stationIds","map","sort","a","b","number","st","filterTransits","filter","transit","rawStations","_loop","name","keys","_loop2","stNumber","forEach","n","normalizeStations","lineName","transits","nextLines","s","buildInitialState","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","getStationById","getStationsByName","getStationDistance","from","to","stationsInLine","fromPos","findIndex","toPos","Math","abs","findRoutes","dispatch","getState","origins","destinations","allItenaries","arrA","arrB","result","elemA","elemB","permutate","_ref","_ref2","slicedToArray","matchingLine","find","itenary","getItenaryPairs","idx","findNextRoute","String","routeId","depth","fromLine","toLine","allTransits","getTransitsInLine","directTransits","matchedLine","t","getNextTransits","tId","transitRouteId","createAndPushRoute","nextStationId","nextStation","isLastRoute","fromStation","toStation","changeLine","distance","compileResults","lastRouteId","routeIds","substring","routes","numberOfStations","numberOfTransits","cleanup","SearchForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitHandler","bind","assertThisInitialized","e","preventDefault","onSubmit","_this$state","_this2","disabled","react","Pane","marginBottom","paddingY","borderBottom","display","className","flex","paddingRight","SelectField","label","width","onChange","setState","target","value","paddingTop","Button","appearance","intent","React","connect","setTimeout","submitSearch","StationBadge","badgeColor","NS","EW","JS","SE","BP","CC","CE","DT","TE","NE","JE","CG","SW","PE","JW","PW","Badge","color","RouteItem","_props$route","background","marginY","padding","Text","components_StationBadge","ResultDetail","Card","border","elevation","marginTop","r","components_RouteItem","ResultList","Heading","components_ResultDetail","getSortedResults","slice","react_default","createElement","SearchFormContainer","ResultListContainer","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41c0da54.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// Action types\nexport const SEARCH_START = 'app/SEARCH_START';\nexport const SEARCH_DONE = 'app/SEARCH_DONE';\nexport const PUSH_RESULTS = 'app/PUSH_RESULTS';\n\n// Action creators\nexport const searchStart = createAction(SEARCH_START);\nexport const searchDone = createAction(SEARCH_DONE);\nexport const pushResults = createAction(PUSH_RESULTS);\n","import { SEARCH_START, SEARCH_DONE, PUSH_RESULTS } from './actions';\nimport { AppState, SearchStartPayload, PushResultsPayload } from './types';\n\ninterface ReduceFn {\n  [actionType: string]: (state: AppState, payload?: any) => AppState;\n}\n\nconst reduceFn: ReduceFn = {\n  [SEARCH_START]: (state, payload: SearchStartPayload) => {\n    return {\n      ...state,\n      isLoading: true,\n      origin: payload.origin,\n      destination: payload.destination\n    };\n  },\n\n  [SEARCH_DONE]: state => {\n    return {\n      ...state,\n      isLoading: false\n    };\n  },\n\n  [PUSH_RESULTS]: (state, payload: PushResultsPayload) => ({\n    ...state,\n    results: payload.results\n  })\n};\n\nexport default reduceFn;\n","import { Reducer, AnyAction } from 'redux';\nimport { AppState } from './types';\nimport reduceFn from './reducer';\n\nconst initialState: AppState = {\n  isLoading: false,\n  results: []\n};\n\nconst appReducer: Reducer = (state: AppState = initialState, action: AnyAction): AppState => {\n  if (reduceFn[action.type]) {\n    return reduceFn[action.type](state, action.payload);\n  }\n\n  return state;\n};\n\nexport default appReducer;\n","import { StationState } from './types';\n\ninterface ReduceFn {\n  [actionType: string]: (state: StationState, payload?: any) => StationState;\n}\n\nconst reduceFn: ReduceFn = {};\n\nexport default reduceFn;\n","import { Reducer, AnyAction } from 'redux';\nimport reduceFn from './reducer';\nimport { StationState } from './types';\n\nconst initialState: StationState = {\n  allStations: [],\n  stationNames: [],\n  stationsByName: {}\n};\n\nconst stationReducer: Reducer = (state: StationState = initialState, action: AnyAction) => {\n  if (reduceFn[action.type]) {\n    return reduceFn[action.type](state, action.payload);\n  }\n\n  return state;\n};\n\nexport default stationReducer;\n","import { createAction } from 'redux-actions';\n\nexport const ADD_VISITED_LINE = 'line/ADD_VISITED_LINE';\nexport const CLEAR_VISITED_LINES = 'line/CLEAR_VISITED_LINES';\n\nexport const addVisitedLine = createAction(ADD_VISITED_LINE);\nexport const clearVisitedLines = createAction(CLEAR_VISITED_LINES);\n","import { ADD_VISITED_LINE, CLEAR_VISITED_LINES } from './actions';\nimport { LineState } from './types';\n\ninterface ReduceFn {\n  [actionType: string]: (state: LineState, payload?: any) => LineState;\n}\n\nconst reduceFn: ReduceFn = {\n  [ADD_VISITED_LINE]: (state, payload) => ({\n    ...state,\n    visitedLines: state.visitedLines.includes(payload) ? state.visitedLines : [...state.visitedLines, payload]\n  }),\n  [CLEAR_VISITED_LINES]: state => ({\n    ...state,\n    visitedLines: []\n  })\n};\n\nexport default reduceFn;\n","import { Reducer, AnyAction } from 'redux';\nimport reduceFn from './reducer';\nimport { LineState } from './types';\n\nconst initialState: LineState = {\n  lineNames: [],\n  stationsByLine: {},\n  transitsInLine: {},\n  visitedLines: []\n};\n\nconst lineReducer: Reducer = (state: LineState = initialState, action: AnyAction) => {\n  if (reduceFn[action.type]) {\n    return reduceFn[action.type](state, action.payload);\n  }\n\n  return state;\n};\n\nexport default lineReducer;\n","import { createAction } from 'redux-actions';\n\nexport const CLEAR_ROUTES = 'route/CLEAR_ROUTES';\nexport const PUSH_ROUTE = 'route/PUSH_ROUTE';\nexport const PUSH_ROUTE_ID = 'route/PUSH_ROUTE_ID';\n\nexport const clearRoutes = createAction(CLEAR_ROUTES);\nexport const pushRoute = createAction(PUSH_ROUTE);\nexport const pushRouteId = createAction(PUSH_ROUTE_ID);\n","import { CLEAR_ROUTES, PUSH_ROUTE, PUSH_ROUTE_ID } from './actions';\nimport { RouteState, PushRoutePayload } from './types';\n\nexport interface ReduceFn {\n  [actionType: string]: (state: RouteState, payload?: any) => RouteState;\n}\n\nconst reduceFn: ReduceFn = {\n  [CLEAR_ROUTES]: () => ({ allRoutes: {}, lastRouteIds: [] }),\n  [PUSH_ROUTE]: (state, payload: PushRoutePayload) => ({\n    ...state,\n    allRoutes: {\n      ...state.allRoutes,\n      [payload.route.id]: payload.route\n    }\n  }),\n  [PUSH_ROUTE_ID]: (state, payload: string) => ({\n    ...state,\n    lastRouteIds: [...state.lastRouteIds, payload]\n  })\n};\n\nexport default reduceFn;\n","import { Reducer, AnyAction } from 'redux';\nimport reduceFn from './reducer';\nimport { RouteState } from './types';\n\nconst initialState: RouteState = {\n  allRoutes: {},\n  lastRouteIds: []\n};\n\nconst lineReducer: Reducer = (state: RouteState = initialState, action: AnyAction) => {\n  if (reduceFn[action.type]) {\n    return reduceFn[action.type](state, action.payload);\n  }\n\n  return state;\n};\n\nexport default lineReducer;\n","import { combineReducers } from 'redux';\n\nimport appReducer from './modules/app';\nimport { AppState } from './modules/app/types';\n\nimport stationReducer from './modules/station';\nimport { StationState } from './modules/station/types';\n\nimport lineReducer from './modules/line';\nimport { LineState } from './modules/line/types';\n\nimport routeReducer from './modules/route';\nimport { RouteState } from './modules/route/types';\n\nexport interface RootState {\n  app: AppState;\n  station: StationState;\n  line: LineState;\n  route: RouteState;\n}\n\nexport default combineReducers({\n  app: appReducer,\n  station: stationReducer,\n  line: lineReducer,\n  route: routeReducer\n});\n","import { RawStations, Station, StationGroup, Transit, TransitGroup } from '../types';\nimport { RootState } from './reducer';\n\nconst normalizeStations = (rawStations: RawStations): Station[] => {\n  const stations: Station[] = [];\n\n  for (let name in rawStations) {\n    const transit = Object.keys(rawStations[name]).length > 1;\n\n    for (let line in rawStations[name]) {\n      const stNumber = rawStations[name][line];\n      const numberArr = typeof stNumber === 'object' ? stNumber : [stNumber];\n\n      numberArr.forEach(n => {\n        stations.push({\n          id: stations.length,\n          name,\n          line,\n          number: n,\n          transit\n        });\n      });\n    }\n  }\n\n  return stations;\n};\n\nconst groupStationsBy = (key: string, stations: Station[]): StationGroup => {\n  const grouped: StationGroup = stations.reduce((obj: StationGroup, station) => {\n    // @ts-ignore\n    const groupKey = station[key];\n\n    if (obj[groupKey]) {\n      obj[groupKey].push(station.id);\n    } else {\n      obj[groupKey] = [station.id];\n    }\n\n    return obj;\n  }, {});\n\n  return grouped;\n};\n\nconst sortStations = (stationIds: number[], allStations: Station[]): number[] => {\n  const stations = stationIds.map(id => allStations[id]);\n  stations.sort((a, b) => a.number - b.number);\n  return stations.map(st => st.id);\n};\n\nconst filterTransits = (stationIds: number[], allStations: Station[]): Station[] => {\n  const transits = stationIds.map(id => allStations[id]).filter(st => st.transit);\n  return transits;\n};\n\nexport default (rawStations: RawStations): RootState => {\n  const allStations = normalizeStations(rawStations);\n  const stationNames = Object.keys(rawStations);\n  const stationsByName = groupStationsBy('name', allStations);\n\n  const lineNames = [];\n  const transitsInLine: TransitGroup = {};\n  const stationsByLine = groupStationsBy('line', allStations);\n\n  for (let lineName in stationsByLine) {\n    lineNames.push(lineName);\n    stationsByLine[lineName] = sortStations(stationsByLine[lineName], allStations);\n\n    // find transit stations and conver to transit objects\n    const transits = filterTransits(stationsByLine[lineName], allStations);\n    transitsInLine[lineName] = transits.map(\n      (station): Transit => {\n        // find all stations with same name but different line\n        return {\n          station: station.id,\n          nextLines: allStations\n            .filter((s: Station) => s.name === station.name && s.line !== station.line)\n            .map(s => s.id)\n        };\n      }\n    );\n  }\n\n  return {\n    app: {\n      isLoading: false,\n      results: []\n    },\n    station: {\n      allStations,\n      stationNames,\n      stationsByName\n    },\n    line: {\n      lineNames,\n      stationsByLine,\n      transitsInLine,\n      visitedLines: []\n    },\n    route: {\n      allRoutes: {},\n      lastRouteIds: []\n    }\n  };\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer';\nimport buildInitialState from './buildInitialState';\nimport stations from '../stations.json';\n\nconst initialState = buildInitialState(stations);\n\nexport default createStore(\n  reducer,\n  // @ts-ignore\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import { StationState } from './types';\nimport { permutate } from '../../../helpers';\nimport { Station, Itenary, stationId } from '../../../types';\n\nexport const getStationById = (state: StationState, id: stationId): Station => state.allStations[id];\n\nexport const getStationsByName = (state: StationState, name?: string): Station[] =>\n  state.allStations.filter(s => s.name === name);\n\nexport const getStationsByIds = (state: StationState, ids: stationId[]): Station[] =>\n  ids.map(id => state.allStations[id]);\n\nexport const getItenaryPairs = (origins: Station[], destinations: Station[]): Itenary[] => {\n  // @ts-ignore\n  const allItenaries: Itenary[] = permutate(origins, destinations).map(([from, to]) => ({ from, to }));\n\n  // Check for matching lines\n  const matchingLine: Itenary | undefined = allItenaries.find(itenary => {\n    return itenary.from.line === itenary.to.line;\n  });\n  if (matchingLine) {\n    return [matchingLine];\n  }\n\n  return allItenaries;\n};\n","import { LineState } from './types';\nimport { RootState } from '../../reducer';\nimport { Station, Transit, stationId } from '../../../types';\nimport { getStationById } from '../station/selectors';\n\nexport const getTransitsInLine = (state: LineState, line: string): Transit[] => state.transitsInLine[line];\n\nexport const getNextTransits = (state: RootState, fromLine: string, toLine: string): Transit[] => {\n  const allTransits: Transit[] = getTransitsInLine(state.line, fromLine);\n  const visitedLines = state.line.visitedLines;\n\n  // find direct transits\n  const directTransits: Transit[] = allTransits\n    .map(transit => {\n      const matchedLine = transit.nextLines.filter((id: stationId) => {\n        const station = getStationById(state.station, id);\n        return station.line === toLine;\n      });\n\n      return {\n        ...transit,\n        nextLines: matchedLine\n      };\n    })\n    .filter(t => t.nextLines.length > 0);\n\n  if (directTransits.length) {\n    return directTransits;\n  }\n\n  // filter visited lines\n  const filtered = allTransits\n    .map(transit => {\n      const matchedLine = transit.nextLines.filter((id: stationId) => {\n        const station = getStationById(state.station, id);\n        return !visitedLines.includes(station.line);\n      });\n\n      return {\n        ...transit,\n        nextLines: matchedLine\n      };\n    })\n    .filter(t => t.nextLines.length > 0);\n\n  return filtered;\n};\n\nexport const getStationDistance = (state: LineState, from: Station, to: Station): number => {\n  if (from.line !== to.line) {\n    return 0;\n  }\n\n  const stationsInLine = state.stationsByLine[from.line];\n  const fromPos = stationsInLine.findIndex(id => id === from.id);\n  const toPos = stationsInLine.findIndex(id => id === to.id);\n\n  return Math.abs(fromPos - toPos);\n};\n","import { RootState } from './reducer';\n\nimport { searchStart, searchDone, pushResults } from './modules/app/actions';\nimport { clearVisitedLines, addVisitedLine } from './modules/line/actions';\nimport { clearRoutes, pushRoute, pushRouteId } from './modules/route/actions';\n\nimport { getStationById, getStationsByName, getItenaryPairs } from './modules/station/selectors';\nimport { getNextTransits, getStationDistance } from './modules/line/selectors';\n\nimport { Station, Itenary, Route, Result, stationId } from '../types';\n\nexport const submitSearch = (origin: string, destination: string) => {\n  return (dispatch: any) => {\n    dispatch(searchStart({ origin, destination }));\n\n    // Wrap in setTimeout to make it async\n    setTimeout(() => {\n      dispatch(findRoutes());\n      dispatch(compileResults());\n      dispatch(searchDone());\n      dispatch(cleanup());\n    }, 0);\n  };\n};\n\nconst findRoutes = () => {\n  return (dispatch: any, getState: any) => {\n    const state: RootState = getState();\n\n    const origins = getStationsByName(state.station, state.app.origin);\n    const destinations = getStationsByName(state.station, state.app.destination);\n\n    const itenaries = getItenaryPairs(origins, destinations);\n    itenaries.forEach((itenary, idx) => {\n      dispatch(findNextRoute(itenary, String(idx)));\n    });\n  };\n};\n\nconst findNextRoute = (itenary: Itenary, routeId: string, depth = 1) => {\n  return (dispatch: any, getState: any) => {\n    const state: RootState = getState();\n    const MAX_DEPTH = 3;\n    const { from, to } = itenary;\n\n    if (depth > MAX_DEPTH) {\n      return;\n    }\n\n    // check if on the same line\n    if (from.line === to.line) {\n      dispatch(createAndPushRoute(from, to, routeId + '0', true));\n      return;\n    }\n\n    // if on different line then find next transits\n    const transits = getNextTransits(state, from.line, to.line);\n    transits.forEach((transit, tId) => {\n      const transitRouteId = routeId + tId;\n      dispatch(createAndPushRoute(from, transit.station, transitRouteId));\n\n      transit.nextLines.forEach((nextStationId, idx) => {\n        const nextStation = getStationById(state.station, nextStationId);\n\n        // add next line to visited line so we won't get in endless transits\n        dispatch(addVisitedLine(nextStation.line));\n\n        dispatch(createAndPushRoute(transit.station, nextStation, transitRouteId + idx));\n\n        const nextItenary: Itenary = {\n          from: nextStation,\n          to\n        };\n        dispatch(findNextRoute(nextItenary, transitRouteId + idx, depth + 1));\n      });\n    });\n  };\n};\n\n// Create route object and push to list of routes\n// also push the id to lastRouteIds if it's the last route\nconst createAndPushRoute = (from: Station | stationId, to: Station | stationId, id: string, isLastRoute = false) => {\n  return (dispatch: any, getState: any) => {\n    const state: RootState = getState();\n\n    const fromStation = typeof from === 'number' ? getStationById(state.station, from) : from;\n    const toStation = typeof to === 'number' ? getStationById(state.station, to) : to;\n    const changeLine = fromStation.line !== toStation.line;\n\n    const route: Route = {\n      id,\n      from: fromStation,\n      to: toStation,\n      changeLine,\n      distance: getStationDistance(state.line, fromStation, toStation)\n    };\n\n    dispatch(pushRoute({ route }));\n    if (isLastRoute) {\n      dispatch(pushRouteId(id));\n    }\n  };\n};\n\n// Compile list of results based on lastRouteId and calculate the total distance\nconst compileResults = () => {\n  return (dispatch: any, getState: any) => {\n    const state: RootState = getState();\n\n    const lastRouteIds = state.route.lastRouteIds;\n\n    const results: Result[] = lastRouteIds.map(\n      (lastRouteId): Result => {\n        // parse route ids\n        let routeIds = [];\n        for (let idx = 1; idx <= lastRouteId.length; idx++) {\n          routeIds.push(lastRouteId.substring(0, idx));\n        }\n\n        // remove missing routes\n        const routes: Route[] = routeIds.map(id => state.route.allRoutes[id]).filter(route => !!route);\n\n        // calculate score\n        let numberOfStations = 0;\n        let numberOfTransits = 0;\n        routes.forEach(route => {\n          numberOfStations += route.distance;\n          numberOfTransits += route.changeLine ? 1 : 0;\n        });\n\n        return {\n          numberOfStations,\n          numberOfTransits,\n          routes\n        };\n      }\n    );\n\n    dispatch(pushResults({ results }));\n  };\n};\n\n// Cleanup any temporary data\nconst cleanup = () => {\n  return (dispatch: any) => {\n    dispatch(clearRoutes());\n    dispatch(clearVisitedLines());\n  };\n};\n","export function permutate(arrA: any[], arrB: any[]): any[] {\n  const result: any[] = [];\n\n  arrA.forEach(elemA => {\n    arrB.forEach(elemB => {\n      result.push([elemA, elemB]);\n    });\n  });\n\n  return result;\n}\n","import * as React from 'react';\n// @ts-ignore\nimport { Pane, Button, SelectField } from 'evergreen-ui';\n\ntype Props = {\n  stations: string[];\n  onSubmit?: (origin: string, destination: string) => void;\n  disabled?: boolean;\n};\n\ntype State = {\n  origin: string;\n  destination: string;\n};\n\nclass SearchForm extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      origin: '',\n      destination: ''\n    };\n\n    this.submitHandler = this.submitHandler.bind(this);\n  }\n\n  submitHandler(e: React.SyntheticEvent) {\n    e.preventDefault();\n    if (!this.props.onSubmit) {\n      return;\n    }\n\n    const { origin, destination } = this.state;\n    this.props.onSubmit(origin, destination);\n  }\n\n  render() {\n    const { props, state } = this;\n    const disabled = props.disabled || !state.origin || !state.destination;\n\n    return (\n      <Pane marginBottom={24} paddingY={24} borderBottom>\n        <form onSubmit={this.submitHandler}>\n          <Pane display=\"flex\" className=\"container\">\n            <Pane display=\"flex\" flex={1} paddingRight={12}>\n              <SelectField\n                label=\"Origin station:\"\n                width=\"100%\"\n                name=\"origin\"\n                marginBottom={0}\n                onChange={(e: any) => this.setState({ origin: e.target.value })}\n                value={state.origin}\n              >\n                <option disabled value=\"\">\n                  Select station\n                </option>\n                {props.stations.map(s => (\n                  <option value={s} key={s}>\n                    {s}\n                  </option>\n                ))}\n              </SelectField>\n            </Pane>\n\n            <Pane display=\"flex\" flex={1} paddingRight={12}>\n              <SelectField\n                label=\"Destination station:\"\n                width=\"100%\"\n                name=\"destination\"\n                marginBottom={0}\n                onChange={(e: any) => this.setState({ destination: e.target.value })}\n                value={state.destination}\n              >\n                <option disabled value=\"\">\n                  Select station\n                </option>\n                {props.stations.map(s => (\n                  <option value={s} key={s}>\n                    {s}\n                  </option>\n                ))}\n              </SelectField>\n            </Pane>\n\n            <Pane display=\"flex\" flex={1} paddingTop={24} className=\"SearchForm-field\">\n              <Button type=\"submit\" appearance=\"primary\" intent=\"success\" disabled={disabled}>\n                Search Routes\n              </Button>\n            </Pane>\n          </Pane>\n        </form>\n      </Pane>\n    );\n  }\n}\n\nexport default SearchForm;\n","// import { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from '../store/reducer';\nimport { submitSearch } from '../store/thunks';\nimport SearchForm from './SearchForm';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    stations: state.station.stationNames,\n    disabled: state.app.isLoading\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSubmit: (origin: string, destination: string) => {\n      dispatch(submitSearch(origin, destination));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchForm);\n","import * as React from 'react';\n// @ts-ignore\nimport { Badge } from 'evergreen-ui';\nimport { Station } from '../types';\n\ntype Props = {\n  station: Station;\n};\n\nconst StationBadge: React.FC<Props> = ({ station }) => {\n  const colors = {\n    NS: 'neutral',\n    EW: 'green',\n    JS: 'blue',\n    SE: 'red',\n    BP: 'orange',\n    CC: 'purple',\n    CE: 'yellow',\n    DT: 'teal',\n    TE: 'neutral',\n    NE: 'green',\n    JE: 'blue',\n    CG: 'red',\n    SW: 'orange',\n    PE: 'purple',\n    JW: 'yellow',\n    PW: 'teal'\n  };\n  // @ts-ignore\n  const badgeColor = colors[station.line];\n\n  return (\n    <Badge color={badgeColor}>\n      <strong>\n        {station.line}\n        {station.number} {station.name}\n      </strong>\n    </Badge>\n  );\n};\n\nexport default StationBadge;\n","import * as React from 'react';\n// @ts-ignore\nimport { Pane, Text } from 'evergreen-ui';\nimport StationBadge from './StationBadge';\nimport { Route } from '../types';\n\ntype Props = {\n  route: Route;\n};\n\nconst RouteItem: React.FC<Props> = props => {\n  const { changeLine, from, to } = props.route;\n  const background = changeLine ? 'yellowTint' : 'blueTint';\n\n  return (\n    <Pane width=\"100%\" marginY={6} padding={12} background={background}>\n      {changeLine ? (\n        <Text>\n          Change to <strong>{to.line}</strong> line\n        </Text>\n      ) : (\n        <Text>\n          Take <strong>{from.line}</strong> line from <StationBadge station={from} /> to <StationBadge station={to} />\n        </Text>\n      )}\n    </Pane>\n  );\n};\n\nexport default RouteItem;\n","import * as React from 'react';\n// @ts-ignore\nimport { Card, Text } from 'evergreen-ui';\nimport { Result } from '../types';\nimport RouteItem from './RouteItem';\n\ntype Props = {\n  result: Result;\n};\n\nconst ResultDetail: React.FC<Props> = props => {\n  const { result } = props;\n\n  return (\n    <Card width=\"100%\" border elevation={0} marginTop={12} padding={16}>\n      <Text>\n        Number of stations: {result.numberOfStations}, Number of transits: {result.numberOfTransits}\n      </Text>\n      {result.routes.map(r => (\n        <RouteItem route={r} key={r.id} />\n      ))}\n    </Card>\n  );\n};\n\nexport default ResultDetail;\n","import * as React from 'react';\n// @ts-ignore\nimport { Pane, Heading } from 'evergreen-ui';\nimport ResultDetail from './ResultDetail';\nimport { Result } from '../types';\n\ntype Props = {\n  results: Result[];\n};\n\nconst ResultList: React.FC<Props> = (props: Props) => {\n  const { results } = props;\n\n  return (\n    <Pane marginBottom={36}>\n      <Heading>Found {results.length} results</Heading>\n\n      {results.map((r, idx) => (\n        <ResultDetail result={r} key={idx} />\n      ))}\n    </Pane>\n  );\n};\n\nexport default ResultList;\n","import { AppState } from './types';\nimport { Result } from '../../../types';\n\nexport const getOrigin = (state: AppState) => state.origin;\nexport const getDestination = (state: AppState) => state.destination;\n\nexport const getSortedResults = (state: AppState): Result[] => {\n  const results = state.results;\n\n  return results.slice().sort((a: Result, b: Result) => {\n    const TRANSIT_WEIGHT = 5;\n    const scoreA = a.numberOfStations + a.numberOfTransits * TRANSIT_WEIGHT;\n    const scoreB = b.numberOfStations + b.numberOfTransits * TRANSIT_WEIGHT;\n\n    return scoreA - scoreB;\n  });\n};\n","import { connect } from 'react-redux';\nimport { RootState } from '../store/reducer';\nimport ResultList from './ResultList';\nimport { getSortedResults } from '../store/modules/app/selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  results: getSortedResults(state.app)\n});\n\nexport default connect(mapStateToProps)(ResultList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n// @ts-ignore\nimport { Text } from 'evergreen-ui';\nimport { RootState } from './store/reducer';\nimport SearchFormContainer from './components/SearchFormContainer';\nimport ResultListContainer from './components/ResultListContainer';\n\ninterface Props {\n  isLoading: boolean;\n  results: any[];\n}\n\nconst App: React.FC<Props> = props => (\n  <div className=\"app\">\n    <SearchFormContainer />\n\n    <div className=\"container\">\n      {props.isLoading && <Text>Finding results...</Text>}\n      {props.results.length > 0 && !props.isLoading && <ResultListContainer />}\n    </div>\n  </div>\n);\n\nexport default connect((state: RootState) => ({\n  isLoading: state.app.isLoading,\n  results: state.app.results\n}))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}